"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var near_exports = {};
__export(near_exports, {
  Near: () => Near
});
module.exports = __toCommonJS(near_exports);
var import_accounts = require("@near-js/accounts");
class Near {
  constructor(config) {
    this.config = config;
    this.connection = import_accounts.Connection.fromConfig({
      networkId: config.networkId,
      provider: config.provider || { type: "JsonRpcProvider", args: { url: config.nodeUrl, headers: config.headers } },
      signer: config.signer || { type: "InMemorySigner", keyStore: config.keyStore || config.deps?.keyStore }
    });
    if (config.masterAccount) {
      const initialBalance = config.initialBalance ? BigInt(config.initialBalance) : 500000000000000000000000000n;
      this.accountCreator = new import_accounts.LocalAccountCreator(new import_accounts.Account(config.masterAccount, this.connection.provider, this.connection.signer), initialBalance);
    } else if (config.helperUrl) {
      this.accountCreator = new import_accounts.UrlAccountCreator(this.connection, config.helperUrl);
    } else {
      this.accountCreator = null;
    }
  }
  /**
   * @param accountId near accountId used to interact with the network.
   */
  async account(accountId) {
    const account = new import_accounts.Account(accountId, this.connection.provider, this.connection.signer);
    return account;
  }
  /**
   * Create an account using the {@link AccountCreator}. Either:
   * * using a masterAccount with {@link LocalAccountCreator}
   * * using the helperUrl with {@link UrlAccountCreator}
   * @see {@link NearConfig#masterAccount} and {@link NearConfig#helperUrl}
   * 
   * @param accountId
   * @param publicKey
   */
  async createAccount(accountId, publicKey) {
    if (!this.accountCreator) {
      throw new Error("Must specify account creator, either via masterAccount or helperUrl configuration settings.");
    }
    await this.accountCreator.createAccount(accountId, publicKey);
    return new import_accounts.Account(accountId, this.connection.provider, this.connection.signer);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Near
});
