"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var connect_exports = {};
__export(connect_exports, {
  connect: () => connect
});
module.exports = __toCommonJS(connect_exports);
var import_unencrypted_file_system_keystore = require('./key_stores/unencrypted_file_system_keystore.js');
var import_key_stores = require('./key_stores/index.js');
var import_near = require('./near.js');
var import_utils = require("@near-js/utils");
var import_depd = __toESM(require("depd"));
async function connect(config) {
  const deprecate = (0, import_depd.default)("connect(config)");
  deprecate("`connect` is no longer maintained, please switch to using `@near-js/*` packages");
  if (config.logger === false) {
    import_utils.Logger.overrideLogger(void 0);
  } else if (config.logger !== void 0 && config.logger !== null) {
    import_utils.Logger.overrideLogger(config.logger);
  }
  if (config.keyPath && (config.keyStore || config.deps?.keyStore)) {
    try {
      const accountKeyFile = await (0, import_unencrypted_file_system_keystore.readKeyFile)(config.keyPath);
      if (accountKeyFile[0]) {
        const keyPair = accountKeyFile[1];
        const keyPathStore = new import_key_stores.InMemoryKeyStore();
        await keyPathStore.setKey(config.networkId, accountKeyFile[0], keyPair);
        if (!config.masterAccount) {
          config.masterAccount = accountKeyFile[0];
        }
        config.keyStore = new import_key_stores.MergeKeyStore([
          keyPathStore,
          config.keyStore || config.deps?.keyStore
        ], { writeKeyStoreIndex: 1 });
        import_utils.Logger.log(`Loaded master account ${accountKeyFile[0]} key from ${config.keyPath} with public key = ${keyPair.getPublicKey()}`);
      }
    } catch (error) {
      import_utils.Logger.warn(`Failed to load master account key from ${config.keyPath}: ${error}`);
    }
  }
  return new import_near.Near(config);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  connect
});
