"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var provider_exports = {};
__export(provider_exports, {
  AccessKeyInfoView: () => import_types.AccessKeyInfoView,
  AccessKeyList: () => import_types.AccessKeyList,
  AccessKeyView: () => import_types.AccessKeyView,
  AccessKeyViewRaw: () => import_types.AccessKeyViewRaw,
  AccessKeyWithPublicKey: () => import_types.AccessKeyWithPublicKey,
  AccountView: () => import_types.AccountView,
  BlockChange: () => import_types.BlockChange,
  BlockChangeResult: () => import_types.BlockChangeResult,
  BlockHash: () => import_types.BlockHash,
  BlockHeader: () => import_types.BlockHeader,
  BlockHeaderInnerLiteView: () => import_types.BlockHeaderInnerLiteView,
  BlockHeight: () => import_types.BlockHeight,
  BlockId: () => import_types.BlockId,
  BlockReference: () => import_types.BlockReference,
  BlockResult: () => import_types.BlockResult,
  BlockShardId: () => import_types.BlockShardId,
  CallFunctionRequest: () => import_types.CallFunctionRequest,
  ChangeResult: () => import_types.ChangeResult,
  Chunk: () => import_types.Chunk,
  ChunkHash: () => import_types.ChunkHash,
  ChunkHeader: () => import_types.ChunkHeader,
  ChunkId: () => import_types.ChunkId,
  ChunkResult: () => import_types.ChunkResult,
  CodeResult: () => import_types.CodeResult,
  ContractCodeView: () => import_types.ContractCodeView,
  CurrentEpochValidatorInfo: () => import_types.CurrentEpochValidatorInfo,
  EpochValidatorInfo: () => import_types.EpochValidatorInfo,
  ExecutionError: () => import_types.ExecutionError,
  ExecutionOutcome: () => import_types.ExecutionOutcome,
  ExecutionOutcomeWithId: () => import_types.ExecutionOutcomeWithId,
  ExecutionOutcomeWithIdView: () => import_types.ExecutionOutcomeWithIdView,
  ExecutionStatus: () => import_types.ExecutionStatus,
  ExecutionStatusBasic: () => import_types.ExecutionStatusBasic,
  FinalExecutionOutcome: () => import_types.FinalExecutionOutcome,
  FinalExecutionStatus: () => import_types.FinalExecutionStatus,
  FinalExecutionStatusBasic: () => import_types.FinalExecutionStatusBasic,
  Finality: () => import_types.Finality,
  FunctionCallPermissionView: () => import_types.FunctionCallPermissionView,
  GasPrice: () => import_types.GasPrice,
  IdType: () => import_types.IdType,
  LightClientBlockLiteView: () => import_types.LightClientBlockLiteView,
  LightClientProof: () => import_types.LightClientProof,
  LightClientProofRequest: () => import_types.LightClientProofRequest,
  MerkleNode: () => import_types.MerkleNode,
  MerklePath: () => import_types.MerklePath,
  NearProtocolConfig: () => import_types.NearProtocolConfig,
  NearProtocolRuntimeConfig: () => import_types.NearProtocolRuntimeConfig,
  NextEpochValidatorInfo: () => import_types.NextEpochValidatorInfo,
  NextLightClientBlockRequest: () => import_types.NextLightClientBlockRequest,
  NextLightClientBlockResponse: () => import_types.NextLightClientBlockResponse,
  NodeStatusResult: () => import_types.NodeStatusResult,
  Provider: () => import_providers.Provider,
  QueryResponseKind: () => import_types.QueryResponseKind,
  RpcQueryRequest: () => import_types.RpcQueryRequest,
  ShardId: () => import_types.ShardId,
  SyncInfo: () => import_types.SyncInfo,
  TotalWeight: () => import_types.TotalWeight,
  Transaction: () => import_types.ProviderTransaction,
  ValidatorStakeView: () => import_types.ValidatorStakeView,
  ViewAccessKeyListRequest: () => import_types.ViewAccessKeyListRequest,
  ViewAccessKeyRequest: () => import_types.ViewAccessKeyRequest,
  ViewAccountRequest: () => import_types.ViewAccountRequest,
  ViewCodeRequest: () => import_types.ViewCodeRequest,
  ViewStateRequest: () => import_types.ViewStateRequest,
  ViewStateResult: () => import_types.ViewStateResult,
  getTransactionLastResult: () => import_utils.getTransactionLastResult
});
module.exports = __toCommonJS(provider_exports);
var import_utils = require("@near-js/utils");
var import_providers = require("@near-js/providers");
var import_types = require("@near-js/types");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AccessKeyInfoView,
  AccessKeyList,
  AccessKeyView,
  AccessKeyViewRaw,
  AccessKeyWithPublicKey,
  AccountView,
  BlockChange,
  BlockChangeResult,
  BlockHash,
  BlockHeader,
  BlockHeaderInnerLiteView,
  BlockHeight,
  BlockId,
  BlockReference,
  BlockResult,
  BlockShardId,
  CallFunctionRequest,
  ChangeResult,
  Chunk,
  ChunkHash,
  ChunkHeader,
  ChunkId,
  ChunkResult,
  CodeResult,
  ContractCodeView,
  CurrentEpochValidatorInfo,
  EpochValidatorInfo,
  ExecutionError,
  ExecutionOutcome,
  ExecutionOutcomeWithId,
  ExecutionOutcomeWithIdView,
  ExecutionStatus,
  ExecutionStatusBasic,
  FinalExecutionOutcome,
  FinalExecutionStatus,
  FinalExecutionStatusBasic,
  Finality,
  FunctionCallPermissionView,
  GasPrice,
  IdType,
  LightClientBlockLiteView,
  LightClientProof,
  LightClientProofRequest,
  MerkleNode,
  MerklePath,
  NearProtocolConfig,
  NearProtocolRuntimeConfig,
  NextEpochValidatorInfo,
  NextLightClientBlockRequest,
  NextLightClientBlockResponse,
  NodeStatusResult,
  Provider,
  QueryResponseKind,
  RpcQueryRequest,
  ShardId,
  SyncInfo,
  TotalWeight,
  Transaction,
  ValidatorStakeView,
  ViewAccessKeyListRequest,
  ViewAccessKeyRequest,
  ViewAccountRequest,
  ViewCodeRequest,
  ViewStateRequest,
  ViewStateResult,
  getTransactionLastResult
});
